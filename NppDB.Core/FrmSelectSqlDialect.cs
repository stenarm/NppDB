using System;
using System.Windows.Forms;

namespace NppDB.Core
{
    // Define Enum here OR in its own file within this namespace
    public enum SqlDialect { None, PostgreSQL, MsAccess }

    public partial class FrmSelectSqlDialect : Form
    {
        // Public property to retrieve the user's choice
        public SqlDialect SelectedDialect { get; private set; } = SqlDialect.None; // Default

        public FrmSelectSqlDialect()
        {
            // This method is generated by the designer and MUST be called first
            InitializeComponent();
            // Now call your setup method
            PopulateDialectDropdown();
        }

        /// <summary>
        /// Populates the ComboBox items and sets a default.
        /// </summary>
        private void PopulateDialectDropdown()
        {
            // Use the control Name set in the designer
            if (cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss != null)
            {
                cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss.Items.Clear();
                cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss.Items.Add("PostgreSQL");
                cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss.Items.Add("MS Access");

                if (cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss.Items.Count > 0)
                {
                    cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss.SelectedIndex = 0; // Default to PostgreSQL
                }
                // DropDownStyle set to DropDownList in the designer properties
            }
        }

        // Event handler wired up from btnOK's Click event in the designer
        private void btnOk_Click(object sender, EventArgs e)
        {
            string selectedText = cbxDbTypescbxDbTypescbxDbTypescbxDbTypessss.SelectedItem?.ToString();

            // Map the selected string back to the SqlDialect enum
            if (selectedText == "PostgreSQL")
            {
                SelectedDialect = SqlDialect.PostgreSQL;
            }
            else if (selectedText == "MS Access")
            {
                SelectedDialect = SqlDialect.MsAccess;
            }
            else
            {
                SelectedDialect = SqlDialect.None;
                MessageBox.Show("Please select a SQL dialect from the list.", "Selection Required", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                // Prevent the dialog from closing if OK was clicked without a valid selection
                // Note: Since DialogResult is OK on the button, we might need to override if validation fails
                // However, with DropDownList style, an item should always be selected if populated.
                // For safety, we can ensure DialogResult isn't set if validation fails:
                this.DialogResult = DialogResult.None;
                return;
            }

            // Explicitly setting OK is fine, but button property should handle it too
            this.DialogResult = DialogResult.OK;
            // Form will close automatically because DialogResult is set
        }

        // Event handler wired up from btnCancel's Click event in the designer
        private void btnCancel_Click(object sender, EventArgs e)
        {
             SelectedDialect = SqlDialect.None;
             // Form will close automatically because button's DialogResult is Cancel
        }
    }
}